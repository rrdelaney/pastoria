/**
 * @fileoverview Router Code Generator
 *
 * This script generates type-safe router configuration files by scanning TypeScript
 * source code for JSDoc annotations. It's part of the "Pastoria" routing framework.
 *
 * How it works:
 * 1. Scans all TypeScript files in the project for exported functions/classes
 * 2. Looks for JSDoc tags: @route, @resource, @appRoot, and @param
 * 3. Looks for exported classes that extend PastoriaRootContext for GraphQL context
 * 4. Generates files from templates:
 *    - js_resource.ts: Resource configuration for lazy loading
 *    - router.tsx: Client-side router with type-safe routes
 *    - app_root.ts: Re-export of the app root component (if @appRoot is found)
 *    - context.ts: Re-export of user's context class, or generate a default one
 *
 * Usage:
 * - Add @route <route-name> to functions to create routes
 * - Add @param <name> <type> to document route parameters
 * - Add @resource <resource-name> to exports for lazy loading
 * - Add @appRoot to a component to designate it as the application root wrapper
 * - Add @gqlContext to a class extending PastoriaRootContext to provide a custom GraphQL context
 * - Add @serverRoute to functions to add an express handler
 *
 * The generator automatically creates Zod schemas for route parameters based on
 * TypeScript types, enabling runtime validation and type safety.
 */

import {readFile} from 'node:fs/promises';
import * as path from 'node:path';
import pc from 'picocolors';
import {
  CodeBlockWriter,
  IndentationText,
  Project,
  SourceFile,
  Symbol,
  SyntaxKind,
  ts,
  TypeFlags,
  WriterFunction,
} from 'ts-morph';

async function loadRouterTemplates(project: Project, filename: string) {
  async function loadSourceFile(fileName: string, templateFileName: string) {
    const template = await readFile(templateFileName, 'utf-8');
    const warningComment = `/*
 * This file was generated by \`pastoria\`.
 * Do not modify this file directly. Instead, edit the template at ${path.basename(templateFileName)}.
 */

`;
    return project.createSourceFile(fileName, warningComment + template, {
      overwrite: true,
    });
  }

  const template = path.join(import.meta.dirname, '../templates', filename);
  const output = path.join('__generated__/router', filename);
  return loadSourceFile(output, template);
}

type RouterResource = {
  sourceFile: SourceFile;
  symbol: Symbol;
  queries: Map<string, string>;
  entryPoints: Map<string, string>;
};

type RouterRoute = {
  sourceFile: SourceFile;
  symbol: Symbol;
  params: Map<string, ts.Type>;
};

type ExportedSymbol = {
  sourceFile: SourceFile;
  symbol: Symbol;
};

interface PastoriaMetadata {
  resources: Map<string, RouterResource>;
  routes: Map<string, RouterRoute>;
  serverHandlers: Map<string, ExportedSymbol>;
  appRoot: ExportedSymbol | null;
  gqlContext: ExportedSymbol | null;
}

// Regex to quickly check if a file contains any Pastoria JSDoc tags
const PASTORIA_TAG_REGEX =
  /@(route|resource|appRoot|param|gqlContext|serverRoute)\b/;

/**
 *
 * @query {abc} 123
 */
function collectPastoriaMetadata(project: Project): PastoriaMetadata {
  const resources = new Map<string, RouterResource>();
  const routes = new Map<string, RouterRoute>();
  const serverHandlers = new Map<string, ExportedSymbol>();
  let appRoot: ExportedSymbol | null = null;
  let gqlContext: ExportedSymbol | null = null;

  function visitRouterNodes(sourceFile: SourceFile) {
    // Skip generated files
    if (sourceFile.getFilePath().includes('__generated__')) {
      return;
    }

    // Skip files that don't contain any Pastoria JSDoc tags
    const fileText = sourceFile.getFullText();
    if (!PASTORIA_TAG_REGEX.test(fileText)) {
      return;
    }

    sourceFile.getExportSymbols().forEach((symbol) => {
      let routerResource = null as [string, RouterResource] | null;
      const resourceQueries = new Map<string, string>();
      const resourceEntryPoints = new Map<string, string>();
      let routerRoute = null as [string, RouterRoute] | null;
      const routeParams = new Map<string, ts.Type>();

      function visitJSDocTags(tag: ts.JSDoc | ts.JSDocTag) {
        if (ts.isJSDoc(tag)) {
          tag.tags?.forEach(visitJSDocTags);
        } else if (ts.isJSDocParameterTag(tag)) {
          const typeNode = tag.typeExpression?.type;
          const tc = project.getTypeChecker().compilerObject;

          const type =
            typeNode == null
              ? tc.getUnknownType()
              : tc.getTypeFromTypeNode(typeNode);

          routeParams.set(tag.name.getText(), type);
        } else if (typeof tag.comment === 'string') {
          switch (tag.tagName.getText()) {
            case 'route': {
              routerRoute = [
                tag.comment,
                {sourceFile, symbol, params: routeParams},
              ];
              break;
            }
            case 'resource': {
              routerResource = [
                tag.comment,
                {
                  sourceFile,
                  symbol,
                  queries: resourceQueries,
                  entryPoints: resourceEntryPoints,
                },
              ];
              break;
            }
            case 'serverRoute': {
              serverHandlers.set(tag.comment, {sourceFile, symbol});
              break;
            }
            case 'query': {
              const match = tag.comment.match(
                /^\s*\{\s*(?<query>\w+)\s*\}\s+(?<name>\w+)\s*$/,
              )?.groups;

              if (match && match.query && match.name) {
                resourceQueries.set(match.name, match.query);
              }
              break;
            }
            case 'entrypoint': {
              const match = tag.comment.match(
                /^\s*\{\s*(?<resource>[\w#]+)\s*\}\s+(?<name>\w+)\s*$/,
              )?.groups;

              if (match && match.resource && match.name) {
                resourceEntryPoints.set(match.name, match.resource);
              }
              break;
            }
          }
        } else {
          // Handle tags without comments (like @ExportedSymbol, @gqlContext)
          switch (tag.tagName.getText()) {
            case 'appRoot': {
              if (appRoot != null) {
                console.warn(
                  pc.yellow('Warning:'),
                  'Multiple @appRoot tags found. Using the first one.',
                );
              } else {
                appRoot = {
                  sourceFile,
                  symbol,
                };
              }
              break;
            }
            case 'gqlContext': {
              // Check if this class extends PastoriaRootContext
              const declarations = symbol.getDeclarations();
              let extendsPastoriaRootContext = false;

              for (const decl of declarations) {
                if (decl.isKind(SyntaxKind.ClassDeclaration)) {
                  const classDecl = decl.asKindOrThrow(
                    SyntaxKind.ClassDeclaration,
                  );
                  const extendsClause = classDecl.getExtends();
                  if (extendsClause != null) {
                    const baseClassName = extendsClause
                      .getExpression()
                      .getText();
                    if (baseClassName === 'PastoriaRootContext') {
                      extendsPastoriaRootContext = true;
                      break;
                    }
                  }
                }
              }

              if (extendsPastoriaRootContext) {
                if (gqlContext != null) {
                  console.warn(
                    pc.yellow('Warning:'),
                    'Multiple classes with @gqlContext extending PastoriaRootContext found. Using the first one.',
                  );
                } else {
                  gqlContext = {
                    sourceFile,
                    symbol,
                  };
                }
              }
              break;
            }
          }
        }
      }

      symbol
        .getDeclarations()
        .flatMap((decl) => ts.getJSDocCommentsAndTags(decl.compilerNode))
        .forEach(visitJSDocTags);

      if (routerRoute != null) {
        routes.set(routerRoute[0], routerRoute[1]);
      }

      if (routerResource != null) {
        resources.set(routerResource[0], routerResource[1]);
      }
    });
  }

  project.getSourceFiles().forEach(visitRouterNodes);
  return {resources, routes, appRoot, gqlContext, serverHandlers};
}

function zodSchemaOfType(tc: ts.TypeChecker, t: ts.Type): string {
  if (t.getFlags() & TypeFlags.String) {
    return `z.pipe(z.string(), z.transform(decodeURIComponent))`;
  } else if (t.getFlags() & TypeFlags.Number) {
    return `z.coerce.number<number>()`;
  } else if (t.getFlags() & TypeFlags.Null) {
    return `z.preprocess(s => s == null ? undefined : s, z.undefined())`;
  } else if (t.isUnion()) {
    const isRepresentingOptional =
      t.types.length === 2 &&
      t.types.some((s) => s.getFlags() & TypeFlags.Null);

    if (isRepresentingOptional) {
      const nonOptionalType = t.types.find(
        (s) => !(s.getFlags() & TypeFlags.Null),
      )!;

      return `z.pipe(z.nullish(${zodSchemaOfType(tc, nonOptionalType)}), z.transform(s => s == null ? undefined : s))`;
    } else {
      return `z.union([${t.types.map((it) => zodSchemaOfType(tc, it)).join(', ')}])`;
    }
  } else if (tc.isArrayLikeType(t)) {
    const typeArg = tc.getTypeArguments(t as ts.TypeReference)[0];
    const argZodSchema =
      typeArg == null ? `z.any()` : zodSchemaOfType(tc, typeArg);

    return `z.array(${argZodSchema})`;
  } else {
    console.log('Could not handle type:', tc.typeToString(t));
    return `z.any()`;
  }
}

function writeEntryPoint(
  writer: CodeBlockWriter,
  metadata: PastoriaMetadata,
  consumedQueries: Set<string>,
  resourceName: string,
  resource: RouterResource,
  parseVars = true,
) {
  writer.writeLine(`root: JSResource.fromModuleId('${resourceName}'),`);
  writer
    .write(`getPreloadProps(${parseVars ? '{params, schema}' : ''})`)
    .block(() => {
      if (parseVars) {
        writer.writeLine('const variables = schema.parse(params);');
      }

      writer.write('return').block(() => {
        writer
          .write('queries:')
          .block(() => {
            for (const [queryRef, query] of resource.queries.entries()) {
              consumedQueries.add(query);

              writer
                .write(`${queryRef}:`)
                .block(() => {
                  writer.writeLine(`parameters: ${query}Parameters,`);
                  writer.writeLine(`variables`);
                })
                .write(',');
            }
          })
          .writeLine(',');

        writer.write('entryPoints:').block(() => {
          for (const [
            epRef,
            subresourceName,
          ] of resource.entryPoints.entries()) {
            const subresource = metadata.resources.get(subresourceName);
            if (subresource) {
              writer.write(`${epRef}:`).block(() => {
                writer.writeLine(`entryPointParams: {},`);
                writer.write('entryPoint:').block(() => {
                  writeEntryPoint(
                    writer,
                    metadata,
                    consumedQueries,
                    subresourceName,
                    subresource,
                    false,
                  );
                });
              });
            }
          }
        });
      });
    });
}

async function generateRouter(project: Project, metadata: PastoriaMetadata) {
  const routerTemplate = await loadRouterTemplates(project, 'router.tsx');
  const tc = project.getTypeChecker().compilerObject;

  const routerConf = routerTemplate
    .getVariableDeclarationOrThrow('ROUTER_CONF')
    .getInitializerIfKindOrThrow(SyntaxKind.AsExpression)
    .getExpressionIfKindOrThrow(SyntaxKind.ObjectLiteralExpression);

  routerConf.getPropertyOrThrow('noop').remove();

  let entryPointImportIndex = 0;
  for (const [
    routeName,
    {sourceFile, symbol, params},
  ] of metadata.routes.entries()) {
    const filePath = path.relative(process.cwd(), sourceFile.getFilePath());
    let entryPointExpression: string;

    // Resource-routes are combined declarations of a resource and a route
    // where we should generate the entrypoint for the route.
    const isResourceRoute = Array.from(metadata.resources.entries()).find(
      ([, {symbol: resourceSymbol}]) => symbol === resourceSymbol,
    );

    if (isResourceRoute) {
      const [resourceName, resource] = isResourceRoute;
      const entryPointFunctionName = `entrypoint_${resourceName.replace(/\W/g, '__')}`;

      routerTemplate.addImportDeclaration({
        moduleSpecifier: './js_resource',
        namedImports: ['JSResource', 'ModuleType'],
      });

      const consumedQueries = new Set<string>();
      routerTemplate.addFunction({
        name: entryPointFunctionName,
        returnType: `EntryPoint<ModuleType<'${resourceName}'>, EntryPointParams<'${routeName}'>>`,
        statements: (writer) => {
          writer.write('return ').block(() => {
            writeEntryPoint(
              writer,
              metadata,
              consumedQueries,
              resourceName,
              resource,
            );
          });
        },
      });

      for (const query of consumedQueries) {
        routerTemplate.addImportDeclaration({
          moduleSpecifier: `#genfiles/queries/${query}$parameters`,
          defaultImport: `${query}Parameters`,
        });
      }

      entryPointExpression = entryPointFunctionName + '()';
    } else {
      const importAlias = `e${entryPointImportIndex++}`;
      const moduleSpecifier = routerTemplate.getRelativePathAsModuleSpecifierTo(
        sourceFile.getFilePath(),
      );

      routerTemplate.addImportDeclaration({
        moduleSpecifier,
        namedImports: [
          {
            name: symbol.getName(),
            alias: importAlias,
          },
        ],
      });

      entryPointExpression = importAlias;
    }

    routerConf.addPropertyAssignment({
      name: `"${routeName}"`,
      initializer: (writer) => {
        writer
          .write('{')
          .indent(() => {
            writer.writeLine(`entrypoint: ${entryPointExpression},`);
            if (params.size === 0) {
              writer.writeLine(`schema: z.object({})`);
            } else {
              writer.writeLine(`schema: z.object({`);
              for (const [paramName, paramType] of Array.from(params)) {
                writer.writeLine(
                  `  ${paramName}: ${zodSchemaOfType(tc, paramType)},`,
                );
              }

              writer.writeLine('})');
            }
          })
          .write('} as const');
      },
    });

    console.log(
      'Created route',
      pc.cyan(routeName),
      'for',
      pc.green(symbol.getName()),
      'exported from',
      pc.yellow(filePath),
    );
  }

  await routerTemplate.save();
}

async function generateJsResource(
  project: Project,
  metadata: PastoriaMetadata,
) {
  const jsResourceTemplate = await loadRouterTemplates(
    project,
    'js_resource.ts',
  );

  const resourceConf = jsResourceTemplate
    .getVariableDeclarationOrThrow('RESOURCE_CONF')
    .getInitializerIfKindOrThrow(SyntaxKind.AsExpression)
    .getExpressionIfKindOrThrow(SyntaxKind.ObjectLiteralExpression);

  resourceConf.getPropertyOrThrow('noop').remove();
  for (const [
    resourceName,
    {sourceFile, symbol},
  ] of metadata.resources.entries()) {
    const filePath = path.relative(process.cwd(), sourceFile.getFilePath());
    const moduleSpecifier =
      jsResourceTemplate.getRelativePathAsModuleSpecifierTo(
        sourceFile.getFilePath(),
      );

    resourceConf.addPropertyAssignment({
      name: `"${resourceName}"`,
      initializer: (writer) => {
        writer.block(() => {
          writer
            .writeLine(`src: "${filePath}",`)
            .writeLine(
              `loader: () => import("${moduleSpecifier}").then(m => m.${symbol.getName()})`,
            );
        });
      },
    });

    console.log(
      'Created resource',
      pc.cyan(resourceName),
      'for',
      pc.green(symbol.getName()),
      'exported from',
      pc.yellow(filePath),
    );
  }

  await jsResourceTemplate.save();
}

async function generateAppRoot(project: Project, metadata: PastoriaMetadata) {
  const targetDir = process.cwd();
  const appRoot: ExportedSymbol | null = metadata.appRoot;

  if (appRoot == null) {
    await project
      .getSourceFile('__generated__/router/app_root.ts')
      ?.deleteImmediately();

    return;
  }

  const appRootSourceFile: SourceFile = appRoot.sourceFile;
  const appRootSymbol: Symbol = appRoot.symbol;
  const filePath = path.relative(targetDir, appRootSourceFile.getFilePath());
  const appRootFile = project.createSourceFile(
    '__generated__/router/app_root.ts',
    '',
    {overwrite: true},
  );

  const moduleSpecifier = appRootFile.getRelativePathAsModuleSpecifierTo(
    appRootSourceFile.getFilePath(),
  );

  appRootFile.addStatements(`/*
 * This file was generated by \`pastoria\`.
 * Do not modify this file directly.
 */

export {${appRootSymbol.getName()} as App} from '${moduleSpecifier}';
`);

  await appRootFile.save();

  console.log(
    'Created app root for',
    pc.green(appRootSymbol.getName()),
    'exported from',
    pc.yellow(filePath),
  );
}

async function generateGraphqlContext(
  project: Project,
  metadata: PastoriaMetadata,
) {
  const targetDir = process.cwd();
  const gqlContext: ExportedSymbol | null = metadata.gqlContext;
  const contextFile = project.createSourceFile(
    '__generated__/router/context.ts',
    '',
    {overwrite: true},
  );

  if (gqlContext != null) {
    const contextSourceFile: SourceFile = gqlContext.sourceFile;
    const contextSymbol: Symbol = gqlContext.symbol;
    const filePath = path.relative(targetDir, contextSourceFile.getFilePath());
    const moduleSpecifier = contextFile.getRelativePathAsModuleSpecifierTo(
      contextSourceFile.getFilePath(),
    );

    contextFile.addStatements(`/*
 * This file was generated by \`pastoria\`.
 * Do not modify this file directly.
 */

export {${contextSymbol.getName()} as Context} from '${moduleSpecifier}';
`);

    console.log(
      'Created GraphQL context for',
      pc.green(contextSymbol.getName()),
      'exported from',
      pc.yellow(filePath),
    );
  } else {
    contextFile.addStatements(`/*
 * This file was generated by \`pastoria\`.
 * Do not modify this file directly.
 */

import {PastoriaRootContext} from 'pastoria-runtime/server';

/**
 * @gqlContext
 */
export class Context extends PastoriaRootContext {}
`);

    console.log(
      'No @gqlContext found, generating default',
      pc.green('Context'),
    );
  }

  await contextFile.save();
}

async function generateServerHandler(
  project: Project,
  metadata: PastoriaMetadata,
) {
  if (metadata.serverHandlers.size === 0) {
    await project
      .getSourceFile('__generated__/router/server_handler.ts')
      ?.deleteImmediately();

    return;
  }

  const sourceText = `import express from 'express';
export const router = express.Router();
`;

  const serverHandlerTemplate = project.createSourceFile(
    '__generated__/router/server_handler.ts',
    sourceText,
    {overwrite: true},
  );

  let serverHandlerImportIndex = 0;
  for (const [
    routeName,
    {symbol, sourceFile},
  ] of metadata.serverHandlers.entries()) {
    const importAlias = `e${serverHandlerImportIndex++}`;
    const filePath = path.relative(process.cwd(), sourceFile.getFilePath());
    const moduleSpecifier =
      serverHandlerTemplate.getRelativePathAsModuleSpecifierTo(
        sourceFile.getFilePath(),
      );

    serverHandlerTemplate.addImportDeclaration({
      moduleSpecifier,
      namedImports: [{name: symbol.getName(), alias: importAlias}],
    });

    serverHandlerTemplate.addStatements(
      `router.use('${routeName}', ${importAlias})`,
    );

    console.log(
      'Created server handler',
      pc.cyan(routeName),
      'for',
      pc.green(symbol.getName()),
      'exported from',
      pc.yellow(filePath),
    );
  }

  await serverHandlerTemplate.save();
}

export async function generatePastoriaArtifacts() {
  const targetDir = process.cwd();
  const project = new Project({
    tsConfigFilePath: path.join(targetDir, 'tsconfig.json'),
    manipulationSettings: {
      indentationText: IndentationText.TwoSpaces,
    },
  });

  const metadata = collectPastoriaMetadata(project);

  await generateAppRoot(project, metadata);
  await generateGraphqlContext(project, metadata);
  await generateRouter(project, metadata);
  await generateJsResource(project, metadata);
  await generateServerHandler(project, metadata);
}
