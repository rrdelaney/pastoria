import react from '@vitejs/plugin-react';
import tailwindcss from '@tailwindcss/vite';
import {access} from 'node:fs/promises';
import * as path from 'node:path';
import {cjsInterop} from 'vite-plugin-cjs-interop';
import {
  build,
  InlineConfig,
  type BuildEnvironmentOptions,
  type Plugin,
} from 'vite';

function generateClientEntry(hasAppRoot: boolean): string {
  const appImport = hasAppRoot
    ? `import {App} from '#genfiles/router/app_root';`
    : '';
  const appValue = hasAppRoot ? 'App' : 'null';

  return `// Generated by Pastoria.
import {createRouterApp} from '#genfiles/router/router';
${appImport}
import {hydrateRoot} from 'react-dom/client';

async function main() {
  const RouterApp = await createRouterApp();
  hydrateRoot(document, <RouterApp App={${appValue}} />);
}

main();
`;
}

function generateServerEntry(hasAppRoot: boolean): string {
  const appImport = hasAppRoot
    ? `import {App} from '#genfiles/router/app_root';`
    : '';
  const appValue = hasAppRoot ? 'App' : 'null';

  return `// Generated by Pastoria.
import {JSResource} from '#genfiles/router/js_resource';
import {
  listRoutes,
  router__createAppFromEntryPoint,
  router__loadEntryPoint,
} from '#genfiles/router/router';
import {getSchema} from '#genfiles/schema/schema';
import {Context} from '#genfiles/router/context';
${appImport}
import {GraphQLSchema, specifiedDirectives} from 'graphql';
import {createRouterHandler, PastoriaConfig} from 'pastoria-runtime/server';
import type {Manifest} from 'vite';

const schemaConfig = getSchema().toConfig();
const schema = new GraphQLSchema({
  ...schemaConfig,
  directives: [...specifiedDirectives, ...schemaConfig.directives],
});

export function createHandler(
  persistedQueries: Record<string, string>,
  config: Required<PastoriaConfig>,
  manifest?: Manifest,
) {
  return createRouterHandler(
    listRoutes(),
    JSResource.srcOfModuleId,
    router__loadEntryPoint,
    router__createAppFromEntryPoint,
    ${appValue},
    schema,
    (req) => Context.createFromRequest(req),
    persistedQueries,
    config,
    manifest,
  );
}
`;
}

function pastoriaEntryPlugin(): Plugin {
  const clientEntryModuleId = 'virtual:pastoria-entry-client.tsx';
  const serverEntryModuleId = 'virtual:pastoria-entry-server.tsx';

  return {
    name: 'pastoria-entry',
    resolveId(id) {
      if (id === clientEntryModuleId) {
        return clientEntryModuleId; // Return without \0 prefix so React plugin can see .tsx extension
      } else if (id === serverEntryModuleId) {
        return serverEntryModuleId;
      }
    },
    async load(id) {
      const appRootPath = path.join(
        process.cwd(),
        '__generated__/router/app_root.ts',
      );

      let hasAppRoot = false;
      try {
        await access(appRootPath);
        hasAppRoot = true;
      } catch {
        hasAppRoot = false;
      }

      if (id === clientEntryModuleId) {
        return generateClientEntry(hasAppRoot);
      } else if (id === serverEntryModuleId) {
        return generateServerEntry(hasAppRoot);
      }
    },
  };
}

export const CLIENT_BUILD: BuildEnvironmentOptions = {
  outDir: 'dist/client',
  rollupOptions: {
    input: 'virtual:pastoria-entry-client.tsx',
  },
};

export const SERVER_BUILD: BuildEnvironmentOptions = {
  outDir: 'dist/server',
  ssr: true,
  rollupOptions: {
    input: 'virtual:pastoria-entry-server.tsx',
  },
};

export function createBuildConfig(
  buildEnv: BuildEnvironmentOptions,
): InlineConfig {
  return {
    appType: 'custom' as const,
    build: {
      ...buildEnv,
      assetsInlineLimit: 0,
      manifest: true,
      ssrManifest: true,
    },
    plugins: [
      pastoriaEntryPlugin(),
      tailwindcss(),
      react({
        babel: {
          plugins: [['babel-plugin-react-compiler', {}], 'relay'],
        },
      }),
      cjsInterop({
        dependencies: ['react-relay', 'react-relay/hooks', 'relay-runtime'],
      }),
    ],
    ssr: {
      noExternal: ['pastoria-runtime'],
    },
  };
}

export async function createBuild() {
  const clientBuild = await build({
    ...createBuildConfig(CLIENT_BUILD),
    configFile: false,
  });

  const serverBuild = await build({
    ...createBuildConfig(SERVER_BUILD),
    configFile: false,
  });
}
