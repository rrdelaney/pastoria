/**
 * Executable schema generated by Grats (https://grats.capt.dev)
 * Do not manually edit. Regenerate by running `npx grats`.
 */
import { defaultFieldResolver, GraphQLSchema, GraphQLDirective, DirectiveLocation, GraphQLList, GraphQLInt, GraphQLObjectType, GraphQLNonNull, GraphQLString } from "graphql";
import { cities as queryCitiesResolver } from "./../../src/schema/cities";
import { greet as queryGreetResolver, hello as queryHelloResolver } from "./../../src/schema/hello";
async function assertNonNull<T>(value: T | Promise<T>): Promise<T> {
    const awaited = await value;
    if (awaited == null)
        throw new Error("Cannot return null for semantically non-nullable field.");
    return awaited;
}
export function getSchema(): GraphQLSchema {
    const CityType: GraphQLObjectType = new GraphQLObjectType({
        name: "City",
        fields() {
            return {
                name: {
                    name: "name",
                    type: GraphQLString,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                }
            };
        }
    });
    const QueryType: GraphQLObjectType = new GraphQLObjectType({
        name: "Query",
        fields() {
            return {
                cities: {
                    description: "Searches for a city by name",
                    name: "cities",
                    type: new GraphQLList(new GraphQLNonNull(CityType)),
                    args: {
                        query: {
                            type: GraphQLString
                        }
                    },
                    resolve(_source, args) {
                        return assertNonNull(queryCitiesResolver(args.query));
                    }
                },
                greet: {
                    description: "Example query showing how to accept arguments.\nTry querying: { greet(name: \"World\") }",
                    name: "greet",
                    type: GraphQLString,
                    args: {
                        name: {
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(_source, args, context) {
                        return assertNonNull(queryGreetResolver(args.name, context));
                    }
                },
                hello: {
                    description: "A simple hello world query that returns a greeting message.",
                    name: "hello",
                    type: GraphQLString,
                    resolve(_source, _args, context) {
                        return assertNonNull(queryHelloResolver(context));
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        directives: [new GraphQLDirective({
                name: "semanticNonNull",
                locations: [DirectiveLocation.FIELD_DEFINITION],
                description: "Indicates that a position is semantically non null: it is only null if there is a matching error in the `errors` array.\nIn all other cases, the position is non-null.\n\nTools doing code generation may use this information to generate the position as non-null if field errors are handled out of band:\n\n```graphql\ntype User {\n    # email is semantically non-null and can be generated as non-null by error-handling clients.\n    email: String @semanticNonNull\n}\n```\n\nThe `levels` argument indicates what levels are semantically non null in case of lists:\n\n```graphql\ntype User {\n    # friends is semantically non null\n    friends: [User] @semanticNonNull # same as @semanticNonNull(levels: [0])\n\n    # every friends[k] is semantically non null\n    friends: [User] @semanticNonNull(levels: [1])\n\n    # friends as well as every friends[k] is semantically non null\n    friends: [User] @semanticNonNull(levels: [0, 1])\n}\n```\n\n`levels` are zero indexed.\nPassing a negative level or a level greater than the list dimension is an error.",
                args: {
                    levels: {
                        type: new GraphQLList(GraphQLInt),
                        defaultValue: [0]
                    }
                }
            })],
        query: QueryType,
        types: [CityType, QueryType]
    });
}
